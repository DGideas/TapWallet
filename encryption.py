import hashlib
import os
from Cryptodome.Cipher import AES
from Cryptodome.Random import get_random_bytes

import global_
import window
import test_framework
import console
import bitcoinlib
import tkinter as tk
from tkinter import filedialog
from tkinter.simpledialog import askstring
from tkinter import messagebox

salt=b'bf23d8d34a3ba2d60bc4584128491331ae9b0d5822cd53388800c7af38e90e32'
#this salt was randomly generated by the programmer.
#it is combined with your password to help against rainbow attacks

wallt_file=None
passwd=None

def create_wallet():
	f = tk.filedialog.asksaveasfile(initialdir = os.getcwd()+"/wallet_files",mode='w', defaultextension=".wallet",filetypes = (("Wallet files",
                                                        "*.wallet*"),
                                                       ("all files",
                                                        "*.*")))
	
	if f is None: # asksaveasfile return `None` if dialog closed with "cancel".
		return

	text2save = str("hallo") # starts from `1.0`, not `0.0`
	f.write(text2save)
	f.close() # `()` was missing.

def save_wallet_to_new_file():
	
	global wallt_file
	global passwd
	wallt_file = tk.filedialog.asksaveasfilename(initialdir = os.getcwd()+"/wallet_files",filetypes = (("Wallet files",
                                                        "*.wallet*"),
                                                       ("all files",
                                                        "*.*")))
	if(len(wallt_file)==0):
		wallt_file=None
		messagebox.showinfo("Wallet name invalid", "You must enter a wallet name and click 'ok'.")
		return False
	
	
	if(len(wallt_file)<7):
		wallt_file+=".wallet"
	elif(wallt_file[-7:]!=".wallet"):
		wallt_file+=".wallet"

	if wallt_file is None: # asksaveasfile return `None` if dialog closed with "cancel".
		
		return None

	try:
		file_=open(wallt_file)
		file_.close()
		messagebox.showinfo("File already exists", "This wallet already exists. You can't override a wallet with a new wallet.")
		wallt_file=None
		passwd=None
		return False
	except:
		passwd=askstring("Create new wallet file","You are creating a new wallet file. Enter a strong password below",show="*")

		if(passwd ==None or len(passwd)==0):
			messagebox.showinfo("Password invalid", "You must enter a password and click 'ok'.")
			wallt_file=None
			passwd=None
			return False
			
	#save_wallet(wallet_file=wallt_file,password=password)
	return True


def save_wallet():
	
	if(wallt_file is None):
		val=save_wallet_to_new_file()
		if(val==False):return False
	
	print("Wallt_file= "+str(wallt_file))

	data=""
	#password="super_password"

	data+="<publiccontainer>"
	for pubkey_container in global_.gl_gui_build_address.pubkey_container_array:
		data+=str(pubkey_container.label0)
		data+="<pos>"+str(pubkey_container.x_pos)+","+str(pubkey_container.y_pos)
		if(pubkey_container.ext_key is not None):
			if(pubkey_container.is_mine):
				data+="<xprv>"+str(pubkey_container.ext_key.wif(is_private=True))
			else:
				data+="<xpub>"+str(pubkey_container.ext_key.wif_public())
		elif(len(pubkey_container.parent_array)>0):
			data+="<parents>"
			for parent in pubkey_container.parent_array:
				data+=str(global_.gl_gui_build_address.pubkey_container_array.index(parent))+","
		elif(len(pubkey_container.privkey)>0):
			data+="<prv>"+str(pubkey_container.privkey[0])
		elif(pubkey_container.pubkey[0] is not None):
			data+="<pub>"+str(pubkey_container.pubkey[0])
		else:
			print("ERROR IN SAVE_WALLET() public container does not have extended, priv and pub key")
		data+="<end>"
	data+="<publiccontainer_end>"

	data+="<scriptcontainer>"
	for script_container in global_.gl_gui_build_address.script_container_array:
		data+=str(script_container.label0)
		data+="<pos>"+str(script_container.x_pos)+","+str(script_container.y_pos)
		if(script_container.timelockDelay>0):
			data+="<rel_timelock>"+str(script_container.timelockDelay)
		if(script_container.timelock>0):
			data+="<abs_timelock>"+str(script_container.timelock)
		if(script_container.hash160 is not None):
			data+="<hash160>"+str(script_container.hash160.hex())
		if(script_container.hash160_preimage is not None):
			data+="<preimage>"+str(script_container.hash160_preimage)
		data+="<parents>"
		for parent in script_container.parent_array:
				data+=str(global_.gl_gui_build_address.pubkey_container_array.index(parent))+","
		data+="<end>"
	data+="<scriptcontainer_end>"

	data+="<hashcontainer>"
	for hash_container in global_.gl_gui_build_address.hash_container_array:
		data+=str(hash_container.label0)
		data+="<pos>"+str(hash_container.x_pos)+","+str(hash_container.y_pos)
		data+="<parents>"
		for parent in hash_container.parent_array:
				try:
					data+="script"+str(global_.gl_gui_build_address.script_container_array.index(parent))+","
				except:
					try:
						data+="hash"+str(global_.gl_gui_build_address.hash_container_array.index(parent))+","
					except:
						print("ERROR IN SAVE_WALLET! parent not found in script or hash array")
		data+="<end>"
	data+="<hashcontainer_end>"

	if(global_.gl_gui_build_address.taproot_container is not None):
		taproot_container=global_.gl_gui_build_address.taproot_container
		data+="<taprootcontainer>"
		data+=str(taproot_container.label0)
		data+="<pos>"+str(taproot_container.x_pos)+","+str(taproot_container.y_pos)
		data+="<parents>"
		for parent in taproot_container.parent_array:
				try:
					data+="pub"+str(global_.gl_gui_build_address.pubkey_container_array.index(parent))+","
				except:
					try:
						data+="script"+str(global_.gl_gui_build_address.script_container_array.index(parent))+","
					except:
						try:
							data+="hash"+str(global_.gl_gui_build_address.hash_container_array.index(parent))+","
						except:
							print("ERROR IN SAVE_WALLET! parent not found in pubkey, script or hash array")
		data+="<end>"
		data+="<taprootcontainer_end>"



	encrypt(wallt_file,data,passwd)
	messagebox.showinfo("Wallet saved", "Wallet saved successfully")

	global_.gl_gui.bool_ask_for_save=False
	return True
	

	
def encrypt(file_,data,password):
	#file_name=str(wallet_name)
	data=str.encode(data)
	password=str.encode(password)
	
	key = hashlib.scrypt(password, salt=salt, n=2**14, r=8, p=1, dklen=32)
	cipher = AES.new(key, AES.MODE_GCM)
	ciphertext, tag = cipher.encrypt_and_digest(data)

	#file_out = open(file_, "wb")
	file_= open(file_, "wb")
	[ file_.write(x) for x in (cipher.nonce, tag, ciphertext) ]
	file_.close()




def decrypt(wallet_name,password):
	file_name=str(wallet_name)
	password=str.encode(password)

	file_in = open(file_name, "rb")
	nonce, tag, ciphertext = [ file_in.read(x) for x in (16, 16, -1) ]

	key = hashlib.scrypt(password, salt=salt, n=2**14, r=8, p=1, dklen=32)
	cipher = AES.new(key, AES.MODE_GCM, nonce)
	try:
		data = cipher.decrypt_and_verify(ciphertext, tag)
		passwd=password
		return data
	except:
		return 0


def load_wallet():

	global wallt_file
	global passwd

	wallt_file = tk.filedialog.askopenfilename(initialdir = os.getcwd()+"/wallet_files",
                                          title = "Select a File",
                                          filetypes = (("Text files",
                                                        "*.wallet*"),
                                                       ("all files",
                                                        "*.*")))
	
	if(len(wallt_file) ==0): return
	passwd=askstring("Open wallet file","This file is encrypted. Enter password below",show="*")

	

	#password="super_password"

	print("Loading wallet information from "+str(wallt_file))

	result=decrypt(wallt_file,passwd)
	if(result==0):
		print("Wrong password")
		messagebox.showerror("Wrong password", "Your password is not correct")
		return
	data=result.decode('UTF-8')

	try:
		delete_content()
	except:
		pass
	


	if(global_.gl_gui.first_init):
		global_.gl_gui.load_main_wallet()

	index_public_container=data.index("<publiccontainer>")
	index_public_container_end=data.index("<publiccontainer_end>")
	public_container_data=data[index_public_container+17:index_public_container_end]
	read_all_public_container_packets(public_container_data)

	index_script_container=data.index("<scriptcontainer>")
	index_script_container_end=data.index("<scriptcontainer_end>")
	script_container_data=data[index_script_container+17:index_script_container_end]
	read_all_script_container_packets(script_container_data)

	index_hash_container=data.index("<hashcontainer>")
	index_hash_container_end=data.index("<hashcontainer_end>")
	hash_container_data=data[index_hash_container+15:index_hash_container_end]
	read_all_hash_container_packets(hash_container_data)

	try:
		index_taproot_container=data.index("<taprootcontainer>")
		index_taproot_container_end=data.index("<taprootcontainer_end>")
		taproot_container_data=data[index_taproot_container+18:index_taproot_container_end]
		if(len(taproot_container_data)>5):read_taproot_container_data(taproot_container_data)
	except:
		pass


	global_.gl_gui.bool_ask_for_save=False

def read_all_public_container_packets(data):
	while(len(data)>5):

		index_end=data.index("<end>")
		single_container_data=data[:index_end+5]
		read_single_pubcontainer_data(single_container_data)
		data=data[index_end+5:]


def read_single_pubcontainer_data(data):
	

	index_next_end=data.index("<")
	

	label=data[:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index(",")
	x_string=data[5:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index("<")
	y_string=data[1:index_next_end]
	data=data[index_next_end:]

	index_end=data.index("<end>")
	
	if(data[:5]=="<prv>"):
		priv_str=data[5:index_end]
		priv_hex=hex(int(priv_str))[2:]
		priv_bytes=bytes.fromhex(priv_hex)
		priv,pub=test_framework.generate_bip340_key_pair(priv_bytes)
		global_.gl_gui_build_address.add_pubkey_container(label=label,ext_key=None,privKey=[priv],pubKey=[pub],parent_array=[],is_mine=True,has_extended_parent=False,x_pos=int(x_string),y_pos=int(y_string))
		data=data[index_end+5:]

	if(data[:5]=="<pub>"):
		pub_str=data[5:index_end]
		pub_hex=hex(int(pub_str, 16))[2:]
		pub_bytes=bytes.fromhex(pub_hex)
		pub=test_framework.ECPubKey().set(pub_bytes)
		global_.gl_gui_build_address.add_pubkey_container(label=label,ext_key=None,privKey=[],pubKey=[pub],parent_array=[],is_mine=False,has_extended_parent=False,x_pos=int(x_string),y_pos=int(y_string))
		data=data[index_end+5:]

	if(data[:6]=="<xprv>"):
		xprv_string=data[6:index_end]
		hd_key=bitcoinlib.keys.HDKey().from_wif(xprv_string)
		global_.gl_gui_build_address.add_pubkey_container(label=label,ext_key=hd_key,privKey=[],pubKey=[],parent_array=[],is_mine=True,has_extended_parent=False,x_pos=int(x_string),y_pos=int(y_string))
		data=data[index_end+6:]

	if(data[:6]=="<xpub>"):
		xprv_string=data[6:index_end]
		hd_key=bitcoinlib.keys.HDKey().from_wif(xprv_string)
		global_.gl_gui_build_address.add_pubkey_container(label=label,ext_key=hd_key,privKey=[],pubKey=[],parent_array=[],is_mine=False,has_extended_parent=False,x_pos=int(x_string),y_pos=int(y_string))
		data=data[index_end+6:]

	if(data[:9]=="<parents>"):
		data=data[9:index_end]

		while(len(data)>1):
			index_comma=data.index(",")
			parent=int(data[:index_comma])
			data=data[index_comma+1:]
			
			global_.gl_selected_container.append(global_.gl_gui_build_address.pubkey_container_array[parent])

		try:
			global_.gl_gui_build_address.editLabel.set(label)
		except:
			global_.gl_gui_build_address.editLabel.configure(text=label)
		global_.gl_gui_build_address.calc_key_released_multisig(int(float(x_string)),int(float(y_string)))




def read_all_script_container_packets(data):
	while(len(data)>5):

		index_end=data.index("<end>")
		single_container_data=data[:index_end+5]
		read_single_scriptcontainer_data(single_container_data)
		data=data[index_end+5:]



def read_single_scriptcontainer_data(data):
	index_next_end=data.index("<")
	

	label=data[:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index(",")
	x_string=data[5:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index("<")
	y_string=data[1:index_next_end]
	data=data[index_next_end:]

	rel_timelock=0
	if(data[:14]=="<rel_timelock>"):
		data=data[14:]
		index_next_end=data.index("<")
		rel_timelock=int(data[:index_next_end])
		data=data[index_next_end:]
	abs_timelock=0
	if(data[:14]=="<abs_timelock>"):
		data=data[14:]
		index_next_end=data.index("<")
		abs_timelock=int(data[:index_next_end])
		data=data[index_next_end:]
	hash160=None
	if(data[:9]=="<hash160>"):
		data=data[9:]
		index_next_end=data.index("<")
		hash160=(data[:index_next_end])
		hash160=bytes.fromhex(hash160)
		data=data[index_next_end:]
	preimage=None
	if(data[:10]=="<preimage>"):
		data=data[10:]
		index_next_end=data.index("<")
		preimage=(data[:index_next_end])
		data=data[index_next_end:]

	if(data[:9]=="<parents>"):
		data=data[9:]
		index_end=data.index("<end>")
		data=data[:index_end]

		index_comma=data.index(",")
		parent=int(data[:index_comma])
		data=data[index_comma+1:]
		
		pubcontainer=global_.gl_gui_build_address.pubkey_container_array[parent]
		pubcontainer.createScript(label=label,x_pos=int(float(x_string)),y_pos=int(float(y_string)),timelockdelay=rel_timelock,timelock=abs_timelock,hash160=hash160)


def read_all_hash_container_packets(data):
	while(len(data)>5):

		index_end=data.index("<end>")
		single_container_data=data[:index_end+5]
		read_single_hashcontainer_data(single_container_data)
		data=data[index_end+5:]



def read_single_hashcontainer_data(data):
	index_next_end=data.index("<")
	

	label=data[:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index(",")
	x_string=data[5:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index("<")
	y_string=data[1:index_next_end]
	data=data[index_next_end:]


	if(data[:9]=="<parents>"):
		index_end=data.index("<end>")
		data=data[9:index_end]
		
		while(len(data)>1):

			index_comma=data.index(",")
			parent_string=data[:index_comma]
			if(parent_string[:4]=="hash"):
				parent_index=int(parent_string[4:])
				hash_container_parent=global_.gl_gui_build_address.hash_container_array[parent_index]
				global_.gl_selected_container.append(hash_container_parent)
			elif(parent_string[:6]=="script"):
				parent_index=int(parent_string[6:])
				script_container_parent=global_.gl_gui_build_address.script_container_array[parent_index]
				global_.gl_selected_container.append(script_container_parent)

			data=data[index_comma+1:]
		
		global_.gl_gui_build_address.calc_key_released_tapbranch(int(float(x_string)),int(float(y_string)))



def read_taproot_container_data(data):
	index_next_end=data.index("<")
	

	label=data[:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index(",")
	x_string=data[5:index_next_end]
	data=data[index_next_end:]

	index_next_end=data.index("<")
	y_string=data[1:index_next_end]
	data=data[index_next_end:]


	if(data[:9]=="<parents>"):
		index_end=data.index("<end>")
		data=data[9:index_end]
		
		while(len(data)>1):

			index_comma=data.index(",")
			parent_string=data[:index_comma]
			if(parent_string[:3]=="pub"):
				parent_index=int(parent_string[3:])
				pub_container_parent=global_.gl_gui_build_address.pubkey_container_array[parent_index]
				global_.gl_selected_container.append(pub_container_parent)
			elif(parent_string[:4]=="hash"):
				parent_index=int(parent_string[4:])
				hash_container_parent=global_.gl_gui_build_address.hash_container_array[parent_index]
				global_.gl_selected_container.append(hash_container_parent)
			elif(parent_string[:6]=="script"):
				parent_index=int(parent_string[6:])
				script_container_parent=global_.gl_gui_build_address.script_container_array[parent_index]
				global_.gl_selected_container.append(script_container_parent)

			data=data[index_comma+1:]
		
		global_.gl_gui_build_address.calc_key_released_taproot(key=0,x_pos=int(float(x_string)),y_pos=int(float(y_string)))

def delete_content():
	length=len(global_.gl_gui_build_address.pubkey_container_array)

	for i in range(length):
		if(len(global_.gl_gui_build_address.pubkey_container_array)>0):
			global_.gl_gui_build_address.pubkey_container_array[0].remove_container()

	global_.gl_gui_build_address.make_new()